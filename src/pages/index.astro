---
import BaseLayout from '../layouts/BaseLayout.astro';
import SkillsCarousel from '../components/SkillsCarousel';
import HeroSection from '../components/HeroSection';
import AboutSection from '../components/AboutSection';
import ProjectsSection from '../components/ProjectsSection';
import ResumeSection from '../components/ResumeSection';
import ContactForm from '../components/ContactForm';

const projects = [
  {
    title: 'My Project',
    videoUrl: 'https://youtu.be/xDlB3Oj2Fg8',
  },
];
---

<BaseLayout
  title="Ryan Huang | AI Product Manager | UCLA Anderson MBA"
  description="AI Product Manager building data-driven, human-centered products. UCLA Anderson MBA with civil engineering and automation background. Specializing in AI-powered tools for construction and design."
>
  <!-- Hero Section with Parallax and Mouse Tracking -->
  <HeroSection client:load />

  <!-- About Section with Animated Gradient Border -->
  <AboutSection client:load />

  <!-- Skills Section -->
  <SkillsCarousel client:only="react" />

  <!-- Projects Section with Animated Hover Effects -->
  <ProjectsSection projects={projects} client:load />

  <!-- Resume Section with Glowing Hover Effects -->
  <ResumeSection baseUrl={import.meta.env.BASE_URL} client:load />

  <!-- Contact Section with Animated Form and Focus Glow -->
  <ContactForm client:load />
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const formContainer = document.getElementById('contact-form-container');
    const thankYouMessage = document.getElementById('thank-you-message');
    const sendAnotherButton = document.getElementById('send-another');
    const submitButton = document.getElementById('submit-button');

    // Handle form submission
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();

      // Disable submit button and show loading state
      if (submitButton) {
        submitButton.textContent = 'Sending...';
        submitButton.setAttribute('disabled', 'true');
      }

      // Get form data
      const formData = new FormData(form);

      try {
        // Submit to Netlify
        const response = await fetch('/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: new URLSearchParams(formData as any).toString(),
        });

        if (response.ok) {
          // Hide form and show thank you message
          formContainer?.classList.add('hidden');
          thankYouMessage?.classList.remove('hidden');

          // Reset form
          form.reset();
        } else {
          throw new Error('Form submission failed');
        }
      } catch (error) {
        console.error('Error submitting form:', error);
        alert('Sorry, there was an error sending your message. Please try again.');
      } finally {
        // Re-enable submit button
        if (submitButton) {
          submitButton.textContent = 'Send Message';
          submitButton.removeAttribute('disabled');
        }
      }
    });

    // Handle "Send Another Message" button
    sendAnotherButton?.addEventListener('click', () => {
      thankYouMessage?.classList.add('hidden');
      formContainer?.classList.remove('hidden');
      // Scroll to form
      formContainer?.scrollIntoView({ behavior: 'smooth', block: 'center' });
    });
  });
</script>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .animate-fade-in {
    opacity: 0;
    animation: fadeIn 1s ease-in forwards;
  }

  .animate-fade-in-up {
    opacity: 0;
    animation: fadeIn 1s ease-in forwards;
  }

  @keyframes gradient {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  .animate-gradient {
    background-size: 200% 200%;
    animation: gradient 15s ease infinite;
  }

  /* Smooth scrolling */
  html {
    scroll-behavior: smooth;
  }

  /* Gradient underline animation */
  .gradient-underline {
    position: relative;
    display: inline-block;
  }

  .gradient-underline::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: -4px;
    width: 100%;
    height: 3px;
    background: linear-gradient(90deg, #60a5fa, #a78bfa, #f472b6);
    background-size: 200% 100%;
    animation: gradientShift 3s ease infinite;
  }

  @keyframes gradientShift {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }
</style>
